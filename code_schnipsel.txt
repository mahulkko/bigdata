dcc.Graph(id='timeseries',
                config={'displayModeBar': False},
                animate=True,
                
                    figure=px.line(test_piv.toPandas(),
                         x='date',
                         y=['diesel','e5','e10'],
                         template='plotly_dark').update_layout(
                                   {'plot_bgcolor': 'rgba(0, 0, 0, 0)',
                                    'paper_bgcolor': 'rgba(0, 0, 0, 0)'},
                                    yaxis_title='Preis',
                                    xaxis_title='Uhrzeit',
                                    legend_title='Benzinart',
                                    title=station_schema.collect()[1][1])
                
                ) 
                
                
                
                
                
                # Testing
##################################################

print("Hole alle Preise von erster Tankstelle")

# Create emty gas schema
diesel_cost = []
e5_cost = []
e10_cost = []

# Register DataFrame as temp SQL view
gas_schema.createOrReplaceTempView("GasPrice")

# Time
time_hour=10
time_minutes=00
time_seconds=00

'''
for i in range(1, station_count-1):
    query="SELECT * from GasPrice where uuid=='{0}' and date >= '2021-11-05 {1}:{2}:{3}'".format(
                            station_schema_collect[i][0],time_hour,time_minutes,time_seconds)
    testDF=spark.sql(query)
    testDFcollect = testDF.collect()
    diesel_cost.append(testDFcollect[i-1][2])
    e5_cost.append(testDFcollect[i-1][3])
    e10_cost.append(testDFcollect[i-1][4])

'''
'''
query="SELECT * from GasPrice where uuid=='{0}' and date >= '2021-11-05 {1}:{2}:{3}'".format(
                            station_schema_collect[1][0],time_hour,time_minutes,time_seconds)
testDF=spark.sql(query)
testDF.show()
'''

for i in range(1, station_count-1):
    query="SELECT AVG(diesel) from GasPrice where uuid=='{0}'".format(
                                station_schema_collect[1][0])
    testDF=spark.sql(query)
    testDFcollect = testDF.collect()
    diesel_cost.append(testDFcollect[0])
